<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <!-- <link rel="stylesheet" href="https://fonts.gstatic.com" crossorigin /> -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Merriweather+Sans:wght@300;400;500;600;700&display=swap" />
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="wrapper">

      <h1>WEATHER APP</h1>

      <div class="tab-container">
        <p class="tab" data-userWeather>Your weather</p>
        <p class="tab" data-searchWeather>Search weather</p>
      </div>

      <div class="weather-container">
        <!-- grant location -->
        <div class="sub-container grant-location-container">
          <img src="./images/location.png" width="80" height="80" loading="lazy">
          <p>Grant location Access</p>
          <p>Allow Access to get weather Information</p>
          <button class="btn" data-grantAccess>Grant Access</button>
        </div>

        <!-- search form -->
        <form class="form-container" data-searchform>
          <input placeholder="Search for City" data-searchInput>
          <button class="btn" type="submit">
            <img src="./images/search.png" loading="lazy" width="20" height="20" alt="search logo">
          </button>
        </form>
        <!-- loading screen container -->
        <div class="sub-container loading-conatiner">
          <img src="./images/loading.gif" width="150" height="150">
          <p>Loading...</p>
        </div>
        <!-- show weather info -->
        <div class="sub-container user-info-container">
          <!-- city name and flag -->
          <div class="name">
            <p data-cityName></p>
            <img data-countryIcon>
          </div>
          <!-- weather description -->
          <p data-weatherDesc></p>
          <!-- weather icon -->
          <img data-weatherIcon>
          <!-- temperature -->
          <p data-temp></p>

          <!-- 3 cards - parameters -->
          <div class="parameter-container">

            <!-- card 1-->
            <div class="parameter">
              <img src="./images/wind.png">
              <p>windspeed</p>
              <p data-windspeed></p>
            </div>
            
            <!-- card 2-->
            <div class="parameter">
              <img src="./images/humidity.png">
              <p>humidity</p>
              <p data-humidity></p>
            </div>

            <!-- card 3-->
            <div class="parameter">
              <img src="./images/cloud.png">
              <p>Clouds</p>
              <p data-cloudiness></p>
            </div>

          </div>

        </div>

      </div>

      

    </div>



    <script src="script.js"></script>
</body>
</html>








//css  --->



*,*::before,*::after{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Merriweather Sans', sans-serif;
}

:root{
    --colorDark1: #112D4E;
    --colorDark1: #3F72AF;
    --colorlight1: #DBE2EF;
    --colorlight2: #F9F7F7;
}

.wrapper{
    width: 100vw;
    height: 100vh;
    color: var(--colorlight2);
    background:linear-gradient(90deg, rgba(27, 27, 135, 1) 0%, rgba(24, 33, 84, 1) 100%);
}

h1{
    text-align: center;
    text-transform: uppercase;
    padding-top: 20px;

}

.tab-container{
    width: 90%;
    max-width: 550px;
    margin-top: 4rem;
    display: flex;
    justify-content: space-between;
    margin: 0 auto;
}

.tab{
    cursor: pointer;
    font-size: 0.875rem;
    letter-spacing: 1.75px;
    padding: 5px 8px;
}

.tab.current-tab{
    background-color: rgba(219, 226, 239, 0.5);
    border-radius: 4px;
}

.weather-container{
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    margin-block: 4rem;
}

.btn{
    all: unset;
    font-size: 0.85rem;
    text-transform: uppercase;
    background-color: var(--colorlight2);
    background-color: #3F72AF;
    background: transparent;
    cursor: pointer;
    padding: 10px 30px;
    border-radius: 7px;
    border: 3px solid rgb(102, 85, 85);
    margin-bottom: 19px;
}

.btn:hover{
    /* scale: 1.1; */
    transform: scale(1.1);
    
}

.sub-container{
    display: flex;
    flex-direction: column;
    align-items: center;
}

.grant-location-container{
     display: none; 
}
.grant-location-container.active{
     display: flex;  

}

.grant-location-container img{
    margin: 2rem;

}

.grant-location-container p:first-of-type{
    /* display: flex;   */
    font-size: 1.75rem;
    font-weight: 600;


}
.grant-location-container p:last-of-type{
    /* display: flex;   */
    font-size: 0.85rem;
    font-weight: 500;
    margin-top: 0.75rem;
    margin-bottom: 1.75rem;
    letter-spacing: 0.75px;
}
.loading-conatiner{
    display: none;
}

.loading-conatiner.active{
    display: flex;  
}

.loading-conatiner p{
    text-transform: uppercase;
}


/* .user-info-container{
    display: none;
} */

.user-info-container.active{
    display: flex;
}
.name{
    display: flex;
    align-items: center;
    gap: 0 0.5rem;
    margin-bottom: 1rem;
}

.user-info-container p{
    font-size: 1.5rem;
    font-weight: 200;
}
.user-info-container img{
    width: 90px;
    height: 90px;
}
.name p{
    font-size: 2rem;

}
.name img{
    width: 30px;
    height: 30px;
}

.user-info-container p[data-temp]
{
    font-size: 2.75rem;
    font-weight: 700;
}

.parameter-container{
    display: flex;
    gap: 10px 20px;
    justify-content: center;
    align-items: center;
    margin-top: 2rem;
}

.parameter{
    display: flex;
    flex-direction: column;
    width: 30%;
    max-width: 200px;
    background-color: rgb(176, 176, 176, 0.3);
    /* background: transparent; */
    border-radius: 5px;
    padding: 1rem;
    gap: 5px 0;
    justify-content: center;
    align-items: center;
}

.parameter img{
    width: 50px;
    height: 50px;

}
.parameter p:first-of-type{
    font-size: 1.15rem;
    font-weight: 600;
    text-transform: uppercase;
}

.parameter p:first-of-type{
    font-size: 1.15rem;
    font-weight:600;
    text-transform: uppercase;
}

.parameter p:last-of-type{
    font-size: 1rem;
    font-weight: 200;
}

.form-container{
    display: none;
    width:90%;
    max-width:550px;
    margin:0 auto;
    justify-content: center;
    align-items: center;
    gap: 0 10px; 
    margin-bottom: 3rem;
}

.form-container.active{
    display: flex;
}

.form-container input{
    all:unset;
    width: calc(100% - 80px);
    height:40px;
    padding: 0 20px;
    background-color:rgb(176, 176, 176, 0.3);
    border-radius: 10px;
}

.form-container input::placeholder{
    color: rgba(255, 255, 255, 0.7);
}

.form-container input:focus{
    outline: 3px solid rgba(255, 255, 255, 0.7);
}

.form-container .btn {
    padding:unset;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 100%;
    margin-bottom:1px;
}

/* .form-container.active{
    scale: 1;
} */









// javascript --->



const userTab = document.querySelector("[data-userWeather]");
const searchTab = document.querySelector("[data-searchWeather]");
const userContainer = document.querySelector(".weather-container");
const grantAccessContainer = document.querySelector(".grant-location-container");
const searchForm = document.querySelector("[data-searchform]");
const loadingScreen = document.querySelector(".loading-conatiner");
const userInfoContainer = document.querySelector(".user-info-container");

//initially
let currentTab = userTab;
const API_KEY = "be284507c8f7aa9153d863329c45f418";
currentTab.classList.add("current-tab");
getfronSessionStorage();

function switchTab(clickedTab)
{
    if(clickedTab != currentTab)
    {
        //removing background color --> current-tab
        currentTab.classList.remove("current-tab");
        currentTab = clickedTab;
        currentTab.classList.add("current-tab")
    }

    if(!searchForm.classList.contains("active")){
        //if search container is invisible ? then make it visible
        userInfoContainer.classList.remove("active");
        grantAccessContainer.classList.remove("active");
        searchForm.classList.add("active");
    }
    else{
        // i was on search tab now i want to make your weather tab visible
        searchForm.classList.remove("active");
        userInfoContainer.classList.remove("active");
        getfronSessionStorage();
    }
}
userTab.addEventListener("click", () =>{
    //passed clicked tab as input parameter
    switchTab(userTab);
})
searchTab.addEventListener("click", () =>{
    //passed clicked tab as input parameter
    switchTab(searchTab);
})


// checks if coordinate are already present in session storage
function getfronSessionStorage(){
    const localCoordinates = sessionStorage.getItem("user-coordinates");
    if(!localCoordinates){
        // if local coordinates nahi mile
        grantAccessContainer.classList.add("active");
    }
    else{
        const coordinates = JSON.parse(localCoordinates);
        fetchUserWeatherInfo(coordinates);
    }
}

async function fetchUserWeatherInfo_c(coordinates){
    const {lat,lon} = coordinates;
    // make grant container invisible
    grantAccessContainer.classList.remove("active");
    //make loader invisible
    loadingScreen.classList.add("active");

    // API call
    try{
        const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`);
        const data = await response.json();

        loadingScreen.classList.remove("active");
        userInfoContainer.classList.add("active")
        renderWeatherInfo(data);
    }
    catch(err){
        loadingScreen.classList.remove("active");

        console.log("Error Found", err);
    }
}

function renderWeatherInfo(weatherInfo){
    //firstly we have to fetch the element

    const cityName = document.querySelector("[data-cityNAme]");
    const countryIcon = document.querySelector("[data-countryIcon]");
    const desc = document.querySelector("[data-weatherDesc]");
    const weatherIcon = document.querySelector("[data-weatherIcon]");
    const temp = document.querySelector("[data-temp]");
    const windspeed = document.querySelector("[data-windspeed]");
    const humidity = document.querySelector("[data-humidity]");
    const cloudiness = document.querySelector("[data-cloudiness]");

    console.log(weatherInfo);

    //fetch values from weatherInfo object and put it UI elements

    cityName.innerText= weatherInfo?.name;
    countryIcon.src = `https://flagcdn.com/144x108/${weatherInfo?.sys?.country.toLowerCase()}.png`;
    desc.innerText = weatherInfo?.weather?.[0]?.description;
    weatherIcon.src = `http://openweathermap.org/img/w/${weatherInfo?.weather?.[0]?.icon}.png`;
    temp.innerText = `${weatherInfo?.main?.temp} °C`;
    windspeed.innerText = `${weatherInfo?.wind?.speed} m/s`;
    humidity.innerText = `${weatherInfo?.main?.humidity}%`;
    cloudiness.innerText = `${weatherInfo?.clouds?.all}%`;

}


function getLocation()
{
    if(navigator.geolocation)
    {
        navigator.geolocation.getCurrentPosition(showPosition);
        
    }
    else{
        alert("No geolocation support available");
        console.log("No geolocation support available")
    }
}

function showPosition(position)
{
    const userCoordinates = {
        lat: position.coords.latitude,
        lon: position.coords.longitude,
    }
    sessionStorage.setItem("user-coordinates", JSON.stringify(userCoordinates));
    fetchUserWeatherInfo_c(userCoordinates);
}

const grantAccessBtn = document.querySelector("[data-grantAccess]")
grantAccessBtn.addEventListener("click", getLocation);


const searchInput = document.querySelector("[data-searchInput]");

searchForm.addEventListener("submit", (e) =>{
    e.preventDefault();
    let cityName = searchInput.value;

    if(cityName === "")
        return;
    else
        fetchUserWeatherInfo(cityName);
})

async function fetchUserWeatherInfo(city){
    loadingScreen.classList.add("active");
    userInfoContainer.classList.remove("active");
    grantAccessContainer.classList.remove("active");

    try{
        const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);

        const data = await response.json();

        loadingScreen.classList.remove("active");
        userInfoContainer.classList.add("active");
        renderWeatherInfo(data);

    }
    catch(err)
    {
        console.log("error found ", err)
    }
}

